generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answers {
  id            String        @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  description   String        @db.VarChar(500)
  shipped_date  DateTime?     @default(now()) @db.Timestamp(6)
  score         Float         @default(0)
  question_id   String        @db.Uuid
  typeanswer_id String        @db.Uuid
  questions     questions     @relation(fields: [question_id], references: [id], onDelete: Cascade)
  types_answers types_answers @relation(fields: [typeanswer_id], references: [id], onDelete: Cascade)
}

model areas {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String      @db.VarChar(100)
  description String      @db.VarChar(500)
  active      Boolean    @default(true)
  questions   questions[]
}

model departments {
  id     String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name   String   @db.VarChar(100)
  active Boolean? @default(true)
  users  users[]
}

model questions {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String    @db.VarChar(600)
  survey_id   String    @db.Uuid
  area_id     String    @db.Uuid
  answers     answers[]
  areas       areas     @relation(fields: [area_id], references: [id], onDelete: Cascade)
  surveys     surveys   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
}

model results {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  result      String    @db.VarChar(100)
  description String    @db.VarChar(600)
  result_date DateTime? @db.Timestamp(6)
  survey_id   String    @db.Uuid
  surveys     surveys   @relation(fields: [survey_id], references: [id], onDelete: Cascade)
}

model surveys {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description   String          @db.VarChar(500)
  create_date   DateTime?       @default(now()) @db.Timestamp(6)
  deadline      DateTime?       @db.Timestamp(6)
  active        Boolean         @default(true)
  user_id       String          @db.Uuid
  name          String?         @db.VarChar(200)
  questions     questions[]
  results       results[]
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  users_surveys users_surveys[]
}

model types_answers {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  type        String    @db.VarChar(100)
  description String    @db.VarChar(500)
  active      Boolean?  @default(true)
  answers     answers[]
}

model users {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String          @unique @db.VarChar(100)
  password      String          @db.VarChar(200)
  name          String          @db.VarChar(200)
  job_title     String          @db.VarChar(100)
  role          Boolean
  active        Boolean         @default(true)
  department_id String          @db.Uuid
  surveys       surveys[]
  departments   departments     @relation(fields: [department_id], references: [id], onDelete: Cascade)
  users_surveys users_surveys[]
}

model users_surveys {
  active    Boolean @default(true)
  user_id   String  @db.Uuid
  survey_id String  @db.Uuid
  surveys   surveys @relation(fields: [survey_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users     users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, survey_id])
}
